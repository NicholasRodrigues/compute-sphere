// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tasks.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/sqlc-dev/pqtype"
)

const addTask = `-- name: AddTask :exec
INSERT INTO tasks (name, payload, parameters, status, assigned_to, priority, retries)
VALUES ($1, $2, $3, 'pending', $4, $5, $6)
`

type AddTaskParams struct {
	Name       string
	Payload    pqtype.NullRawMessage
	Parameters pqtype.NullRawMessage
	AssignedTo sql.NullInt32
	Priority   sql.NullInt32
	Retries    sql.NullInt32
}

func (q *Queries) AddTask(ctx context.Context, arg AddTaskParams) error {
	_, err := q.db.ExecContext(ctx, addTask,
		arg.Name,
		arg.Payload,
		arg.Parameters,
		arg.AssignedTo,
		arg.Priority,
		arg.Retries,
	)
	return err
}

const getPendingTask = `-- name: GetPendingTask :one
SELECT id, name, payload, parameters, status, assigned_to, priority, retries, created_at, updated_at
FROM tasks
WHERE status = 'pending'
LIMIT 1
`

func (q *Queries) GetPendingTask(ctx context.Context) (Task, error) {
	row := q.db.QueryRowContext(ctx, getPendingTask)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Payload,
		&i.Parameters,
		&i.Status,
		&i.AssignedTo,
		&i.Priority,
		&i.Retries,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTaskStatus = `-- name: UpdateTaskStatus :exec
UPDATE tasks
SET status = $2, updated_at = NOW()
WHERE id = $1
`

type UpdateTaskStatusParams struct {
	ID     int32
	Status string
}

func (q *Queries) UpdateTaskStatus(ctx context.Context, arg UpdateTaskStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateTaskStatus, arg.ID, arg.Status)
	return err
}
